/*やること*/
・Nodeの設計
    構文規則は、「キツネさんでもわかるLLVM」を参考。
    Nodeの作り方は、（https://gnuu.org/2009/09/18/writing-your-own-toy-compiler/）がシンプルそう。
・Nodeクラスの仕様に合わせて%union %token %type を書く。

・CodeGenの作成
・CodeGenに記号表を作る。

/* 疑問 */
ASTを作るだけでいいのか？
ASTはrootからたどれる木構造という意味？
ASTはどのような形で実装されている必要がある？（ie. ポインタを使った連結リストで木構造を構成する）
LLVMはどうやってASTをたどるのか？
CodeGenではなにをすればいい？
Passの実装までできるか？

/* Node list */
Node 　　//基底クラス

  Program
    Function:Node //関数
    Function_declaration:Node //プロトタイプ宣言

      Block:NODE                //関数のbody
      (メンバ)Statement_list     //Statementの集合

        Statement                //宣言や定義,if文,式などの文
          Variable_declaration:NODE
          If_statement:NODE
          Return:NODE

          Expression　           //式
            Variable:NODE
            Integer:NODE
            Double:NODE
            Char:NODE
            Function_call:NODE
            Binary_operator:NODE

クラス名
node_(?????)

/* ASTをたどりながらすること。 */
// 各規則におけるノードの生成。
// 変数,関数の定義,関数の宣言を行う文を見つけた時に、
// それぞれの記号表に変数,関数のデータを登録すること。
